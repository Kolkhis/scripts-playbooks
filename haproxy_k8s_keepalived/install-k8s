#!/bin/bash
# shellcheck disable=SC1090
# TODO: add error handling

OS_FAMILY=$(cat /etc/*release | grep -i "ID_LIKE" | awk -F= '{print $2}')
printf "OS family: %s\n" "$OS_FAMILY"

if [[ -z "$OS_FAMILY" ]]; then
    printf "Trying again to determine OS family.\n"
    {
        which apt && printf "OS_FAMILY: %s\n" "${OS_FAMILY:=debian}"; 
    } || {
        which dnf && printf "OS_FAMILY: %s\n" "${OS_FAMILY:=rhel}"; 
    }
fi



if ! sudo swapoff -a; then
    printf "Couldn't disable SWAP!\n" && exit 1
fi

# comment out swap entries
if ! sudo sed -i '/swap/s/^/#/' /etc/fstab; then
    printf "Unable to comment out swap entries from /etc/fstab!\n"
fi

if [[ $OS_FAMILY == *debian* ]]; then
    printf "Using debian installation.\n"
    sudo apt-get update
    sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
    sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/dev/Release.key | 
        sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    # allow unprivileged apt programs to read it
    sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    printf "Adding the k8s apt repository.\n"
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pks.k8s.io/core:/stable:/v1.32/deb/ /' |
        sudo tee /etc/apt/sources.list.d/kubernetes.list

    printf "Installing kubelet, kubeadm, and kubectl.\n"
    sudo apt-get install kubelet kubeadm kubectl -y

    printf "Attempting to add the 'br_netfilter' kernel module.\n"
	cat <<- 'EOF' | sudo tee /etc/modules-load.d/k8s.conf
		br_netfilter
	EOF

    sudo modprobe br_netfilter

    printf "Attempting to configure network bridge for iptables.\n"
    cat <<- 'EOF' | sudo tee /etc/sysctl.d/k8s.conf
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables = 1
	EOF

    sudo sysctl --system

    kubeadm version
    kubelet --version
    kubectl version --client

    # enable kubectl bash completion 
    if dpkg -l | grep -qi 'bash-completion'; then
        source <(kubectl completion bash)
        { 
            printf 'source <(kubectl completion bash)\n';
            printf 'alias k=kubectl\n';
            printf 'complete -o default -F __start_kubectl k\n';
        } >> ~/.bashrc
    fi

fi


if [[ $OS_FAMILY == *rhel* ]]; then
    printf "Performing RHEL-based installation.\n"

    # set selinux to permissive
    if [[ $(getenforce | tr '[:upper:]' '[:lower:]') == enforcing ]]; then
        sudo setenforce 0
        sudo sed -i -E 's/^(SELINUX=)enforcing$/\1permissive/' /etc/selinux/config
    fi
    :

    # install deps
    if ! sudo dnf install -y yum-utils device-mapper-persistent-data lvm2 containerd; then
        printf >&2 "Error installing dependencies!\n" && exit 1
    fi

    # download gpg key
    printf "Downloading RPM repository GPG key...\n"
    if ! sudo curl -o /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes \
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg; then
        printf >&2 "Error while downloading GPG key!\n" && exit 1
    fi

    if ! sudo chmod 644 /etc/pki/rpm-gpg/RPM-GPG-KEY-kubernetes; then
        printf "Error changing GPG key permissions!\n" && exit 1
    fi

    printf "Adding Kubernetes repository to /etc/yum.repos.d/kubernetes.repo ...\n"
    cat <<- 'EOF' | sudo tee /etc/yum.repos.d/kubernetes.repo
	[kubernetes]
	name=Kubernetes
	baseurl=https://pkgs.k8s.io/core:/stable:/v1.32/rpm
	enabled=1
	gpgcheck=1
	repo_gpgcheck=0
	gpgkey=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/repodata/repomd.xml.key
	EOF
    printf "Repository added.\n"

    printf "Installing kubelet, kubectl, and kubeadm...\n"

    if ! sudo dnf install kubelet kubectl kubeadm -y; then
        printf >&2 "There was an problem installing kubelet, kubectl, and kubeadm!\n" && exit 1
    fi

    if ! sudo systemctl enable --now kubelet; then
        printf >&2 "There was a problem enabling the kubelet service!\n" && exit 1
    fi

    if ! kubeadm version; then
        printf >&2 "Kubeadm could not be verified!\n"
    fi

    if ! kubectl version --client; then
        printf >&2 "Kubectl could not be verified!\n"
    fi

    if ! kubelet --version; then
        printf >&2 "Kubelet could not be verified!\n"
    fi
    


    printf "Adding 'br_netfilter' kernel module.\n"
    cat <<- 'EOF' | sudo tee /etc/modules-load.d/k8s.conf
		br_netfilter
	EOF
    if ! sudo modprobe br_netfilter; then
        printf >&2 "modprobe: Unable to load the br_netfilter kernel module.\n"
    fi


    printf "Configuring iptables network bridge\n"
	cat <<- 'EOF' | sudo tee /etc/sysctl.d/k8s.conf
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables = 1
	EOF

    printf "Reloading kernel modules.\n"
    if ! sudo sysctl --system; then
        printf "Unable to reload kernel modules!\n" && exit 1
    fi

    if rpm -qa | grep -i 'bash-completion'; then
        printf "Bash-completion is on the system. Adding completion for Kubernetes.\n"
        source <(kubectl completion bash)
        { 
            printf 'source <(kubectl completion bash)\n';
            printf 'alias k=kubectl\n';
            printf 'complete -o default -F __start_kubectl k\n';
        } >> ~/.bashrc
        printf "Added completion for Kubernetes.\n"
    fi

    # open ports 6443 and 10250 in firewalld
    if [[ $(sudo systemctl is-active firewalld) == 'active' ]]; then
        printf "Opening ports 6443 and 10250 in firewalld.\n"
        sudo firewall-cmd --add-port 6443/tcp --permanent
        sudo firewall-cmd --add-port 10250/tcp --permanent
        sudo firewall-cmd --reload
    fi

fi

