- name: Set up prometheus
  hosts: localhost  # Placeholder
  vars: # TODO(vars): Utilize vars in playbook instead of hardcoded links/versions
    prometheus_version: "3.0.1"
    prometheus_tarball: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
    prometheus_extracted_directory: "/var/lib/prometheus"
  tasks:

    - name: Create a user account for Prometheus
      become: yes
      ansible.builtin.user:
        name: prometheus
        shell: /sbin/nologin

    - name: Create the /var/lib/prometheus directory
      ansible.builtin.file:
        path: /var/lib/prometheus
        state: directory
        mode: '0755'

    - name: Download Prometheus tarball
      ansible.builtin.get_url:
        url: https://github.com/prometheus/prometheus/releases/download/v3.0.1/prometheus-3.0.1.linux-amd64.tar.gz
        dest: /tmp/prometheus-3.0.1.linux-amd64.tar.gz

    - name: Extract the Prometheus tarball 
      ansible.builtin.unarchive:
        remote_src: yes
        src: /tmp/prometheus-3.0.1.linux-amd64.tar.gz
        dest: /var/lib/prometheus
        extra_opts: [ '--strip-components=1' ]  # TODO(test): extra_opts may not work

        # TODO(test): Test this remote src
    - name: Copy Prometheus binary to /usr/bin
      become: yes
      ansible.builtin.copy:
        remote_src: true
        src: /var/lib/prometheus/prometheus
        dest: /usr/bin/prometheus


    # - name: Copy Prometheus binary to /usr/bin
    #   become: yes
    #   ansible.builtin.shell:
    #     cmd: |
    #       cp /var/lib/prometheus/prometheus /usr/bin/prometheus
    #     # tar -xzf /tmp/prometheus-3.0.1.linux-amd64.tar.gz -C /var/lib/prometheus --strip-components=1


    - name: Change ownership of prometheus binary
      ansible.builtin.file:
        path: /usr/bin/prometheus
        owner: prometheus
        group: prometheus
        mode: '0755'

    - name: Create the /etc/prometheus directory for configuration
      ansible.builtin.file:
        path: /etc/prometheus
        state: directory
        mode: '0755'

    - name: Deploy prometheus.yml into /etc/prometheus
      ansible.builtin.copy:
        dest: /etc/prometheus/prometheus.yml
        contents: |
          # /etc/prometheus/prometheus.yml
          global:
            scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
            evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
            # scrape_timeout is set to the global default (10s).

          # Alertmanager configuration
          alerting:
            alertmanagers:
              - static_configs:
                  - targets:
                    # - alertmanager:9093
          # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
          rule_files:
            # - "first_rules.yml"
            # - "second_rules.yml"

          # A scrape configuration containing exactly one endpoint to scrape:
          # Here it's Prometheus itself.
          scrape_configs:
            # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
            - job_name: "prometheus"
              static_configs:
                - targets: ["localhost:9090"]

              # metrics_path defaults to '/metrics'
              # scheme defaults to 'http'.
            
            - job_name: 'Prometheus_node'
              static_configs:
                - targets: 
                    - 'localhost:9100'
            - job_name: 'node_exporter'
              file_sd_configs:
                - files:
                    - '/etc/prometheus/targets.json'
        # TODO: Add nodes running node_exporter to targets ("hostname:9100")
        # TODO (cont): Create script to dynamically generate a list of hosts using
        #              either the Proxmox API or a bash script.
        # 
        # TODO (service discovery): Use file service discovery instead of hardcoded targets 
        # - job name: 'node_exporter'
        #   file_sd_configs:
        #     - files: 
        #         - '/etc/prometheus/targets.json'

    - name: Check if targets.json exists
      ansible.builtin.stat:
        path: /etc/prometheus/targets.json
      register: targets_file

    - name: Create targets.json if it doesn't exist
      ansible.builtin.copy:
        dest: /etc/prometheus/targets.json
        content: |
          []
      when: not targets_file.stat.exists


    - name: Deploy prometheus.service into /etc/systemd/system
      ansible.builtin.copy:
        dest: /etc/systemd/system/prometheus.service
        contents: |
          # /etc/systemd/system/prometheus.service
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/bin/prometheus \
           --config.file /etc/prometheus/prometheus.yml \
           --storage.tsdb.path /var/lib/prometheus/ \
           --web.console.templates=/var/lib/prometheus/consoles \
           --web.console.libraries=/var/lib/prometheus/console_libraries

          [Install]
          WantedBy=multi-user.target


      ##### Saving IP to facts
    - name: Save the prometheus host machine's network IP to a variable
      ansible.builtin.command:
        cmd: 'hostname -I | awk "{print $1}"'
      register: prometheus_host_ip

    - name: Save the prometheus host machine's network IP to facts
      ansible.builtin.set_fact:
        prometheus_host_ip: "{{ prometheus_host_ip.stdout | trim }}"

  handlers:
    - name: restart prometheus
      become: yes
      ansible.builtin.systemd:
        daemon_reload: true
        name: prometheus.service
        state: started
        enabled: true
      register: sysctl_prom_output
      notify: Check the status of prometheus

    - name: Check the status of prometheus
      ansible.builtin.debug:
        msg: "{{ sysctl_prom_output.stdout | trim }}"

