- name: Install and configure node_exporter
  hosts: localhost
  vars:
    node_exporter_version: 1.8.2
    node_exporter_platform: "linux-amd64"  # TODO: Port code to work with this variable
    node_exporter_dir: "/opt/node_exporter"
    node_exporter_tarball: "node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    node_exporter_extracted_dir: "{{ node_exporter_dir }}/node_exporter-{{ node_exporter_version }}.linux-amd64"
  tasks:

    - name: Creation, download, and extraction of node_exporter
      become: true
      block:
        - name: Create /opt/node_exporter directory
          ansible.builtin.file:
            path: "{{ node_exporter_dir }}"
            state: directory
            mode: '0755'

        - name: Create /etc/sysconfig directory
          ansible.builtin.file:
            path: /etc/sysconfig
            state: directory
            mode: '0755'

        - name: Download the given version of node_exporter
          ansible.builtin.get_url:
            url: |
              https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz
            dest: "{{ node_exporter_dir }}"
            mode: '0755'

        - name: Extract node exporter
          ansible.builtin.unarchive:
            src: "{{ node_exporter_dir }}/{{ node_exporter_tarball }}"
            dest: "{{ node_exporter_dir }}"

        - name: Create a user account for node_exporter
          ansible.builtin.user:
            name: node_exporter
            shell: /sbin/nologin

        - name: Create /var/lib/node_exporter/textfile_collector
          ansible.builtin.file:
            path: /var/lib/node_exporter/textfile_collector
            state: directory
            owner: node_exporter
            group: node_exporter
            mode: '0755'


    - name: Clone and copy configuration files
      become: true
      block:

        - name: Clone the node_exporter configuration files repo
          ansible.builtin.git:
            repo: "https://github.com/prometheus/node_exporter.git"
            dest: "{{ node_exporter_dir }}/config_files"

        - name: Copy the node_exporter unit files into systemd directory
          ansible.builtin.copy:
            remote_src: true
            src: "{{ node_exporter_dir }}/config_files/examples/systemd/{{ item }}"
            dest: "/etc/systemd/system/{{ item }}"
            mode: '0755'
          loop:
            - "node_exporter.socket"
            - "node_exporter.service"

        - name: Copy the node_exporter binary to /usr/sbin
          ansible.builtin.copy:
            remote_src: true
            src: "{{ node_exporter_extracted_dir }}/node_exporter"
            dest: /usr/sbin/node_exporter
            owner: node_exporter
            group: node_exporter
            mode: '0755'

        - name: Copy sysconfig file to /etc/sysconfig
          ansible.builtin.copy:
            remote_src: true
            src: "{{ node_exporter_dir }}/config_files/examples/systemd/sysconfig.node_exporter"
            dest: "/etc/sysconfig/node_exporter"
            mode: '0755'


    - name: Systemd service commands
      become: true
      block:

        # TODO(firewall): Open port 9100 if it's not open already
        - name: Check if firewalld is running
          ansible.builtin.systemd:
            name: firewalld
          register: firewalld_status

        - name: Output firewalld status
          ansible.builtin.debug:
            msg: "Firewalld Status: {{ firewalld_status.status['ActiveState'] }}"

        - name: Open port 9100 if firewalld is running
          ansible.builtin.shell:
            cmd: |
              sudo firewall-cmd --add-port=9100/tcp --permanent
              sudo firewall-cmd --reload
          when: firewalld_status.status['ActiveState'] == 'active'

        - name: Reload daemons and start node_exporter
          ansible.builtin.systemd:
            name: node_exporter.service
            state: started
            enabled: true
            daemon_reload: true


    - name: Save remote machine's IP to variable
      ansible.builtin.shell:
        cmd: "hostname -I | awk '{print $1}'"
      register: node_exporter_ip

    - name: Save remote machine's IP to facts
      ansible.builtin.set_fact:
        node_exporter_target: "{{ node_exporter_ip.stdout | trim }}:9100"

    - name: Output the node's metrics IP endpoint
      ansible.builtin.debug:
        msg: "http://{{ node_exporter_target }}/metrics"

# # PLAY 2: Configuring Prometheus to scrape the new target(s)
# - name: Add node_exporter targets to Prometheus
#   hosts: localhost
#   vars:
#     node_exporter_target: hostvars['']['node_exporter_target']
#   tasks:

#     - name: Gather the node_exporter_targets
#       ansible.builtin.set_fact:
#         node_exporter_targets: >-
#           {{
#             ansible_play_hosts_all | map('extract', hostvars, 'node_exporter_target') | list
#           }}

#     - name: Debug collected targets
#       ansible.builtin.debug:
#         msg: "{{ node_exporter_targets }}"


